<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Azure Function on markkerry.github.io</title><link>https://markkerry.github.io/tags/azure-function/</link><description>Recent content in Azure Function on markkerry.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Sep 2021 10:31:24 +0100</lastBuildDate><atom:link href="https://markkerry.github.io/tags/azure-function/index.xml" rel="self" type="application/rss+xml"/><item><title>Automated Autopilot Tenant Move Part 1: Using Graph, Azure Functions and Azure Storage</title><link>https://markkerry.github.io/posts/automated-autopilot-tenant-move/</link><pubDate>Sun, 26 Sep 2021 10:31:24 +0100</pubDate><guid>https://markkerry.github.io/posts/automated-autopilot-tenant-move/</guid><description>Thanks to Powers-Hell (Ben) for the handy Get-AuthHeader and Invoke-GraphCall PowerShell functions.
Introduction There may be a scenario where you need all of your Intune managed, Autopilot registered devices setup on a new tenant. But there are a few challenges you will face:
An OEM may have uploaded every device&amp;rsquo;s hardware hash to Autopilot, so you do not have them to upload to the new tenant. An Autopilot device cannot be deleted from the registration service while it&amp;rsquo;s a &amp;ldquo;managed device&amp;rdquo; (enrolled in Intune).</description></item><item><title>Quick How-to: Using the Azure Functions Console Sandbox</title><link>https://markkerry.github.io/posts/azure-functions-console-sandbox/</link><pubDate>Sun, 29 Aug 2021 13:31:00 +0100</pubDate><guid>https://markkerry.github.io/posts/azure-functions-console-sandbox/</guid><description>Introduction In this short post I will walk through the process to create new files for your Azure Function project, using the Console tool. This may come in handy for people who develop their Azure functions from the Azure portal.
As stated when opening the Console development tool:
&amp;ldquo;Manage your web app environment by running common commands (&amp;lsquo;mkdir&amp;rsquo;, &amp;lsquo;cd&amp;rsquo; to change directories, etc.) This is a sandbox environment, so any commands that require elevated privileges will not work.</description></item><item><title>Serverless LAPS Azure Function and Proactive Remediation</title><link>https://markkerry.github.io/posts/serverless-laps-azure-function/</link><pubDate>Sun, 25 Apr 2021 11:04:45 +0100</pubDate><guid>https://markkerry.github.io/posts/serverless-laps-azure-function/</guid><description>Based on the great solution created by John Seerden with a little help creating and deploying Azure Functions by the Serverless on Azure YouTube channel.
All of the code in this post can be found in my GitHub repo
I am only posting a few differences here, such as creating the Azure resources using AZ CLI and creating/testing/deploying the function using the Azure Functions Core Tools CLI.
What is Serverless LAPS Local Admin Password Solution (LAPS) is a great solution from Microsoft to allow IT admins to automatically recycle local admin accounts on domain joined Windows machines.</description></item></channel></rss>