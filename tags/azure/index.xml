<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Azure on markkerry.github.io</title><link>https://markkerry.github.io/tags/azure/</link><description>Recent content in Azure on markkerry.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 02 Apr 2023 12:39:38 +0000</lastBuildDate><atom:link href="https://markkerry.github.io/tags/azure/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy an Azure Automation Runbook With PowerShell</title><link>https://markkerry.github.io/posts/2023/04/deploy-automation-runbook-with-powershell/</link><pubDate>Sun, 02 Apr 2023 12:39:38 +0000</pubDate><guid>https://markkerry.github.io/posts/2023/04/deploy-automation-runbook-with-powershell/</guid><description>The following will walk through the steps to deploy a PowerShell 5.1 and 7.1 runtime, Azure Automation Runbook, using PowerShell. This may be necessary if you are using a deployment script in a pipeline. There are two different methods to this depending on if you are deploying a runtime type of PowerShell 5.1 or PowerShell 7.1. If you want to use the ForEach-Object -Parrallel feature for example, then you will have to use PowerShell 7.</description></item><item><title>Deploy an ASP.NET Core Web App to an AKS Cluster</title><link>https://markkerry.github.io/posts/2022/11/deploy-aspcore-app-to-aks/</link><pubDate>Sun, 20 Nov 2022 12:09:21 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/11/deploy-aspcore-app-to-aks/</guid><description>In this post I will demonstrate containerising a simple ASP.NET Core web app, pushing it to an Azure Container Registry (ACR), and then running it in a two-node Azure Kubernetes Service (AKS) cluster. It&amp;rsquo;s not too CLI heavy, and has a lot of manual steps. But it&amp;rsquo;s a good insight into the end-to-end process of how you can develop and test an app in AKS.
The prerequisites you will need installed on your machine:</description></item><item><title>Terraform in Azure DevOps Pipelines</title><link>https://markkerry.github.io/posts/2022/08/ado-terraform-build/</link><pubDate>Sun, 14 Aug 2022 09:53:20 +0100</pubDate><guid>https://markkerry.github.io/posts/2022/08/ado-terraform-build/</guid><description>The following will walkthrough deploying Azure resources using Terraform in Azure DevOps Pipelines. Although its a detailed guide, there is an expectation that the person following already has a good understanding of Git, Azure and Terraform.
It&amp;rsquo;s setup with the master or main branch created in DevOps and then cloned locally. A new branch is created and then committed to DevOps (Branch policies will restrict committing directly into master/main). A Pull Request is then created and the first pipeline is run which initialites a terraform plan and terraform validate.</description></item><item><title>Azure Functions University Python Lesson</title><link>https://markkerry.github.io/posts/2022/07/azure-func-university-python-lesson/</link><pubDate>Sun, 17 Jul 2022 14:51:31 +0100</pubDate><guid>https://markkerry.github.io/posts/2022/07/azure-func-university-python-lesson/</guid><description>The following will run through the Python exercise from the Azure Functions University repo and YouTube channel. Azure Functions University is a great resource for learning all about Azure Functions, including all the various triggers, languages, deployment, and Durable Functions.
Also it&amp;rsquo;s worth reviewing the Azure Functions Python developer guide on Microsoft Docs.
Create the Azure Function The following applications are a prerequisite to get started:
Azure Functions Core Tools - To build, test and deploy the Azure Function Azure CLI - To create the Azure resources Python 3.</description></item><item><title>Terraform Azure Provider</title><link>https://markkerry.github.io/posts/2022/06/terraform-azure-provider/</link><pubDate>Sun, 05 Jun 2022 10:01:49 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/06/terraform-azure-provider/</guid><description>In the following post I will demonstrate getting started with the Terraform Azure Provider. I&amp;rsquo;ll build the configuration for:
Resource Group Virtual Network Subnet Network Security Group (Allow SSH) NSG Association 2 x Linux Virtual Machines 2 x Network Interface Cards 2 x Public IPs These will all be deployed them from Azure Cloud Shell.
Remote vs Local State A quick note on the Terraform state file&amp;hellip; I have decided to create a remote state file, stored in an Azure Storage Account in order to demonstrate the &amp;ldquo;backend&amp;rdquo; configuration.</description></item><item><title>Quick How-to: Push/Pull to Azure Container Registry</title><link>https://markkerry.github.io/posts/2022/02/acr-push-pull/</link><pubDate>Sun, 20 Feb 2022 11:27:17 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/02/acr-push-pull/</guid><description>In this post I will detail the quick steps to push and pull a Docker container image from an Azure Container Registry.
Using my Go app, I stopped at building the container and continued from here:
Create the Azure Container Registry In the Azure portal, browse to the resource group of your choice or create a new one.
Select Create &amp;gt; Containers &amp;gt; Container Registry
I specified the following:
Subscription Resource group Registry Name: acrmkmdsn Location: UK South Availability zones: Disabled SKU: Standard Leave the rest as default and continue on to Create.</description></item><item><title>Automated Autopilot Tenant Move Part 1: Using Graph, Azure Functions and Azure Storage</title><link>https://markkerry.github.io/posts/2021/09/automated-autopilot-tenant-move-part1/</link><pubDate>Sun, 26 Sep 2021 10:31:24 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/09/automated-autopilot-tenant-move-part1/</guid><description>Thanks to Powers-Hell (Ben) for the handy Get-AuthHeader and Invoke-GraphCall PowerShell functions.
Introduction There may be a scenario where you need all of your Intune managed, Autopilot registered devices setup on a new tenant. But there are a few challenges you will face:
An OEM may have uploaded every device&amp;rsquo;s hardware hash to Autopilot, so you do not have them to upload to the new tenant. An Autopilot device cannot be deleted from the registration service while it&amp;rsquo;s a &amp;ldquo;managed device&amp;rdquo; (enrolled in Intune).</description></item><item><title>Quick How-to: Using the Azure Functions Console Sandbox</title><link>https://markkerry.github.io/posts/2021/08/azure-functions-console-sandbox/</link><pubDate>Sun, 29 Aug 2021 13:31:00 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/08/azure-functions-console-sandbox/</guid><description>Introduction In this short post I will walk through the process to create new files for your Azure Function project, using the Console tool. This may come in handy for people who develop their Azure functions from the Azure portal.
As stated when opening the Console development tool:
&amp;ldquo;Manage your web app environment by running common commands (&amp;lsquo;mkdir&amp;rsquo;, &amp;lsquo;cd&amp;rsquo; to change directories, etc.) This is a sandbox environment, so any commands that require elevated privileges will not work.</description></item><item><title>Create and Deploy an Azure Container Instance with Azure Bicep</title><link>https://markkerry.github.io/posts/2021/08/create-an-azure-container-image/</link><pubDate>Sun, 22 Aug 2021 11:23:45 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/08/create-an-azure-container-image/</guid><description>Using the Go container created in a previous post, in the post I will detail the steps to author and deploy an Azure Container Instance using Azure Bicep. Hosted in a Linux container, the image will be pulled from Docker Hub.
What are Azure Container Instances Azure Container Instances provides basic container functionality for simple solutions with no orchestration. They can be deployed with public accessibility (public IP and FQDN), or deployed to a VNet for private network access.</description></item><item><title>Azure ARM Templates - Part 4: Azure Portal Custom Deployment</title><link>https://markkerry.github.io/posts/2021/08/azure-arm-templates-part-4-custom-deployment/</link><pubDate>Sun, 01 Aug 2021 12:03:23 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/08/azure-arm-templates-part-4-custom-deployment/</guid><description>In my previous posts I walked through the process to author ARM templates using VS Code and the Azure Resource Manager (ARM) Tools extension. In this post I will walk through the process to author ARM templates from scratch using the Azure portal&amp;rsquo;s Custom Deployment feature. It&amp;rsquo;s handy for getting started with ARM template authoring, but as you will see below, creates resources with old API versions, bloats the variables element, and creates the variables element at the bottom of the template.</description></item><item><title>Azure ARM Templates - Part 3: Deployment</title><link>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-3-deployment/</link><pubDate>Sun, 04 Jul 2021 12:55:22 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-3-deployment/</guid><description>In the third and final post of this series I&amp;rsquo;ll quickly cover the process to deploy the ARM template with PowerShell
Deploy Open PowerShell and change directory to the location of your ARM template and parameter files. Then complete the following commands to connect to Azure and create a Resource Group to deploy the resources to:
# Import the Azure Az PowerShell Module Import-Module -Name Az # Connect to Azure and authenticate Connect-AzAccount # Create the Resource Group New-AzResourceGroup -Name &amp;#34;rg-eu-vm&amp;#34; -Location &amp;#34;westeurope&amp;#34; Once the Resource Group has been created it&amp;rsquo;s time to deploy the resources using the New-AzResourceGroupDeployment cmdlet.</description></item><item><title>Azure ARM Templates - Part 2: Testing</title><link>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-2-testing/</link><pubDate>Sat, 03 Jul 2021 15:50:08 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-2-testing/</guid><description>Following on from authoring the Azure ARM Templates - Part 1: Development post, in this one I will cover testing the ARM template.
Two potential ways to test the ARM templates is by manually building a Pester test, and another is by using Microsoft&amp;rsquo;s Azure Resource Manager Template Toolkit (arm-ttk) module.
You can run local tests against ARM templates using PowerShell - which I will demonstrate in the post - but most commonly template testing and validating is used during a CI pipeline.</description></item><item><title>Azure ARM Templates - Part 1: Development</title><link>https://markkerry.github.io/posts/2021/06/azure-arm-templates-part-1-development/</link><pubDate>Sun, 27 Jun 2021 13:05:17 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/06/azure-arm-templates-part-1-development/</guid><description>In the first of this three part series of posts, I will breakdown the components of an Azure ARM template, and the tools used to develop one. Then in part two I will cover testing an ARM template. And finally in part three, I will cover deploying the resources in the ARM template to Azure.
The ARM template will consist of the following resources:
Windows VM Network Interface Public IP Virtual Network Network Security Group Storage Account Getting Started Before looking at Bicep, Terraform or Pulumi, I think it&amp;rsquo;s important to get to know the process of developing Azure ARM templates from scratch.</description></item><item><title>Serverless LAPS Azure Function and Proactive Remediation</title><link>https://markkerry.github.io/posts/2021/04/serverless-laps-azure-function/</link><pubDate>Sun, 25 Apr 2021 11:04:45 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/04/serverless-laps-azure-function/</guid><description>Based on the great solution created by John Seerden with a little help creating and deploying Azure Functions by the Serverless on Azure YouTube channel.
All of the code in this post can be found in my GitHub repo
I am only posting a few differences here, such as creating the Azure resources using AZ CLI and creating/testing/deploying the function using the Azure Functions Core Tools CLI.
What is Serverless LAPS Local Admin Password Solution (LAPS) is a great solution from Microsoft to allow IT admins to automatically recycle local admin accounts on domain joined Windows machines.</description></item></channel></rss>