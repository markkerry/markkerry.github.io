<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>IaC on markkerry.github.io</title><link>https://markkerry.github.io/tags/iac/</link><description>Recent content in IaC on markkerry.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 29 May 2022 10:01:49 +0000</lastBuildDate><atom:link href="https://markkerry.github.io/tags/iac/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform Azure Provider</title><link>https://markkerry.github.io/posts/2022/06/terraform-azure-provider/</link><pubDate>Sun, 29 May 2022 10:01:49 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/06/terraform-azure-provider/</guid><description>In the following post I will demonstrate getting started with the Terraform Azure Provider. I&amp;rsquo;ll build the configuration for:
Resource Group Virtual Network Subnet Network Security Group (Allow SSH) NSG Association 2 x Linux Virtual Machines 2 x Network Interface Cards 2 x Public IPs These will all be deployed them from Azure Cloud Shell.
Remote vs Local State A quick note on the Terraform state file&amp;hellip; I have decided to create a remote state file, stored in an Azure Storage Account in order to demonstrate the &amp;ldquo;backend&amp;rdquo; configuration.</description></item><item><title>Terraform VirtualBox Provider</title><link>https://markkerry.github.io/posts/2022/05/terraform-virtualbox-provider/</link><pubDate>Sun, 01 May 2022 10:02:49 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/05/terraform-virtualbox-provider/</guid><description>In this post I will demonstrate how to deploy 2x Ubuntu Virtual Machines using the Terraform VirtualBox provider, terra-farm
You can install VirtualBox on Ubuntu using this guide. The main.tf file is configured to use a network adapter called vnetbox1, so you need to ensure it is created and set DHCP Server to Enable.
Install Terraform Let&amp;rsquo;s start by installing Terraform. The following is from the official Terraform documentation:
Add the Terraform gpg key.</description></item><item><title>Create and Deploy an Azure Container Instance with Azure Bicep</title><link>https://markkerry.github.io/posts/2021/08/create-an-azure-container-image/</link><pubDate>Sun, 22 Aug 2021 11:23:45 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/08/create-an-azure-container-image/</guid><description>Using the Go container created in a previous post, in the post I will detail the steps to author and deploy an Azure Container Instance using Azure Bicep. Hosted in a Linux container, the image will be pulled from Docker Hub.
What are Azure Container Instances Azure Container Instances provides basic container functionality for simple solutions with no orchestration. They can be deployed with public accessibility (public IP and FQDN), or deployed to a VNet for private network access.</description></item><item><title>Azure ARM Templates - Part 4: Azure Portal Custom Deployment</title><link>https://markkerry.github.io/posts/2021/08/azure-arm-templates-part-4-custom-deployment/</link><pubDate>Sun, 01 Aug 2021 12:03:23 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/08/azure-arm-templates-part-4-custom-deployment/</guid><description>In my previous posts I walked through the process to author ARM templates using VS Code and the Azure Resource Manager (ARM) Tools extension. In this post I will walk through the process to author ARM templates from scratch using the Azure portal&amp;rsquo;s Custom Deployment feature. It&amp;rsquo;s handy for getting started with ARM template authoring, but as you will see below, creates resources with old API versions, bloats the variables element, and creates the variables element at the bottom of the template.</description></item><item><title>Azure ARM Templates - Part 3: Deployment</title><link>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-3-deployment/</link><pubDate>Sun, 04 Jul 2021 12:55:22 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-3-deployment/</guid><description>In the third and final post of this series I&amp;rsquo;ll quickly cover the process to deploy the ARM template with PowerShell
Deploy Open PowerShell and change directory to the location of your ARM template and parameter files. Then complete the following commands to connect to Azure and create a Resource Group to deploy the resources to:
# Import the Azure Az PowerShell Module Import-Module -Name Az # Connect to Azure and authenticate Connect-AzAccount # Create the Resource Group New-AzResourceGroup -Name &amp;#34;rg-eu-vm&amp;#34; -Location &amp;#34;westeurope&amp;#34; Once the Resource Group has been created it&amp;rsquo;s time to deploy the resources using the New-AzResourceGroupDeployment cmdlet.</description></item><item><title>Azure ARM Templates - Part 2: Testing</title><link>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-2-testing/</link><pubDate>Sat, 03 Jul 2021 15:50:08 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-2-testing/</guid><description>Following on from authoring the Azure ARM Templates - Part 1: Development post, in this one I will cover testing the ARM template.
Two potential ways to test the ARM templates is by manually building a Pester test, and another is by using Microsoft&amp;rsquo;s Azure Resource Manager Template Toolkit (arm-ttk) module.
You can run local tests against ARM templates using PowerShell - which I will demonstrate in the post - but most commonly template testing and validating is used during a CI pipeline.</description></item><item><title>Azure ARM Templates - Part 1: Development</title><link>https://markkerry.github.io/posts/2021/06/azure-arm-templates-part-1-development/</link><pubDate>Sun, 27 Jun 2021 13:05:17 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/06/azure-arm-templates-part-1-development/</guid><description>In the first of this three part series of posts, I will breakdown the components of an Azure ARM template, and the tools used to develop one. Then in part two I will cover testing an ARM template. And finally in part three, I will cover deploying the resources in the ARM template to Azure.
The ARM template will consist of the following resources:
Windows VM Network Interface Public IP Virtual Network Network Security Group Storage Account Getting Started Before looking at Bicep, Terraform or Pulumi, I think it&amp;rsquo;s important to get to know the process of developing Azure ARM templates from scratch.</description></item></channel></rss>