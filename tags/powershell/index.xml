<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>PowerShell on markkerry.github.io</title><link>https://markkerry.github.io/tags/powershell/</link><description>Recent content in PowerShell on markkerry.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 04 Jul 2021 12:55:22 +0100</lastBuildDate><atom:link href="https://markkerry.github.io/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure ARM Templates - Part 3: Deployment</title><link>https://markkerry.github.io/posts/azure-arm-templates-part-3-deployment/</link><pubDate>Sun, 04 Jul 2021 12:55:22 +0100</pubDate><guid>https://markkerry.github.io/posts/azure-arm-templates-part-3-deployment/</guid><description>In the third and final post of this series I&amp;rsquo;ll quickly cover the process to deploy the ARM template with PowerShell
Deploy Open PowerShell and change directory to the location of your ARM template and parameter files. Then complete the following commands to connect to Azure and create a Resource Group to deploy the resources to:
# Import the Azure Az PowerShell Module Import-Module -Name Az # Connect to Azure and authenticate Connect-AzAccount # Create the Resource Group New-AzResourceGroup -Name &amp;#34;rg-eu-vm&amp;#34; -Location &amp;#34;westeurope&amp;#34; Once the Resource Group has been created it&amp;rsquo;s time to deploy the resources using the New-AzResourceGroupDeployment cmdlet.</description></item><item><title>Azure ARM Templates - Part 2: Testing</title><link>https://markkerry.github.io/posts/azure-arm-templates-part-2-testing/</link><pubDate>Sat, 03 Jul 2021 15:50:08 +0100</pubDate><guid>https://markkerry.github.io/posts/azure-arm-templates-part-2-testing/</guid><description>Following on from authoring the Azure ARM Templates - Part 1: Development post, in this one I will cover testing the ARM template.
Two potential ways to test the ARM templates is by manually building a Pester test, and another is by using Microsoft&amp;rsquo;s Azure Resource Manager Template Toolkit (arm-ttk) module.
You can run local tests against ARM templates using PowerShell - which I will demonstrate in the post - but most commonly template testing and validating is used during a CI pipeline.</description></item><item><title>MSIPatches PowerShell Module</title><link>https://markkerry.github.io/posts/msipatches-powershell-module/</link><pubDate>Fri, 28 May 2021 12:51:14 +0100</pubDate><guid>https://markkerry.github.io/posts/msipatches-powershell-module/</guid><description>I created a PowerShell module a few years back to safely purge the C:\Windows\Installer directory of any orphaned MSI patches. This directory can often grow very large in size due to applications such as Microsoft Office (MSI not Click-to-Run) being regularly patched. Superseded patches get left behind leaving them in an orphaned state. The MSIPatches module can detect and move the orphaned patches freeing up valuable disk space.
This module requires the MSI module by Heath Stewart, which will be automatically installed when MSIPatches module is installed.</description></item><item><title>Serverless LAPS Azure Function and Proactive Remediation</title><link>https://markkerry.github.io/posts/serverless-laps-azure-function/</link><pubDate>Sun, 25 Apr 2021 11:04:45 +0100</pubDate><guid>https://markkerry.github.io/posts/serverless-laps-azure-function/</guid><description>Based on the great solution created by John Seerden with a little help creating and deploying Azure Functions by the Serverless on Azure YouTube channel.
All of the code in this post can be found in my GitHub repo
I am only posting a few differences here, such as creating the Azure resources using AZ CLI and creating/testing/deploying the function using the Azure Functions Core Tools CLI.
What is Serverless LAPS Local Admin Password Solution (LAPS) is a great solution from Microsoft to allow IT admins to automatically recycle local admin accounts on domain joined Windows machines.</description></item></channel></rss>