<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>markkerry.github.io</title><link>https://markkerry.github.io/</link><description>Recent content on markkerry.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 May 2022 10:02:49 +0000</lastBuildDate><atom:link href="https://markkerry.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform VirtualBox Provider</title><link>https://markkerry.github.io/posts/2022/05/terraform-virtualbox-provider/</link><pubDate>Sun, 01 May 2022 10:02:49 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/05/terraform-virtualbox-provider/</guid><description>In this post I will demonstrate how to deploy 2x Ubuntu Virtual Machines using the Terraform VirtualBox provider, terra-farm
You can install VirtualBox on Ubuntu using this guide. The main.tf file is configured to use a network adapter called vnetbox1, so you need to ensure it is created and set DHCP Server to Enable.
Install Terraform Let&amp;rsquo;s start by installing Terraform. The following is from the official Terraform documentation:
Add the Terraform gpg key.</description></item><item><title>Configure Windows Server 2022 with Ansible</title><link>https://markkerry.github.io/posts/2022/04/windows-cis-with-ansible/</link><pubDate>Sun, 10 Apr 2022 09:29:10 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/04/windows-cis-with-ansible/</guid><description>In a Windows Server environment which is not domain joined and where group policies are available to configure hosts, it is important to harden the server infrastructure against security vulnerabilities via other methods. In this post I will demonstrate applying the CIS security policies for Windows Server with Ansible. You can find all the configurations for this post on GitHub - ubuntu-config/ansible-win.
Since Ansible cannot be installed on Windows, I am using the same adminbox Ubuntu host which has Ansible installed already from the following posts:</description></item><item><title>Ansible Part 1: Setup and Configure on Ubuntu and VirtualBox</title><link>https://markkerry.github.io/posts/2022/04/ansible-part-1/</link><pubDate>Sun, 03 Apr 2022 10:32:05 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/04/ansible-part-1/</guid><description>This is part one in a three part Ansible series, which will demonstrate how you can get started learning Ansible. The complete list of posts in this series are:
Ansible Part 1: Setup and Configure on Ubuntu and VirtualBox (This post) Ansible Part 2: Playbooks Ansible Part 3: Variables, Vault and Roles All code in these posts can be found on GitHub - ubuntu-config/ansible
Getting Started I used the adminbox VM connected to the KubeNatNetwork (10.</description></item><item><title>Ansible Part 2: Playbooks</title><link>https://markkerry.github.io/posts/2022/04/ansible-part-2/</link><pubDate>Sun, 03 Apr 2022 10:31:05 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/04/ansible-part-2/</guid><description>In this post I&amp;rsquo;ll be going over Ansible Playbooks. The complete list of posts in this series are:
Ansible Part 1: Setup and Configure on Ubuntu and VirtualBox Ansible Part 2: Playbooks (This post) Ansible Part 3: Variables, Vault and Roles All code in these posts can be found on GitHub - ubuntu-config/ansible
Playbooks Playbooks allow us to write ordered process and manage configurations in the form of yaml syntax.</description></item><item><title>Ansible Part 3: Variables, Vault and Roles</title><link>https://markkerry.github.io/posts/2022/04/ansible-part-3/</link><pubDate>Sun, 03 Apr 2022 10:30:05 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/04/ansible-part-3/</guid><description>In this post I&amp;rsquo;ll demonstrate using variables in your Ansible Playbooks, then go on to secret management using Ansible Vault, before finally completing the post covering Ansible Roles. The complete list of posts in this series are:
Ansible Part 1: Setup and Configure on Ubuntu and VirtualBox Ansible Part 2: Playbooks Ansible Part 3: Variables, Vault and Roles (This post) All code in these posts can be found on GitHub - ubuntu-config/ansible and GitHub - ubuntu-config/ansible-roles</description></item><item><title>Kubernetes - Pull an Image From a Private Docker Hub Registry</title><link>https://markkerry.github.io/posts/2022/03/go-container-kubernetes/</link><pubDate>Sun, 13 Mar 2022 09:11:47 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/03/go-container-kubernetes/</guid><description>A while back I created a Go container which returns the hostname of the container its running on - markkerry.github.io - Running a Local Go Web App in Docker. Running this container from a Kubernetes cluster was what I had in mind when I created it. In this post I will walk through the steps I completed to create the Kubernetes deployment with an image pulled from Docker Hub.
I will be using the same Ubuntu server lab running on VirtualBox - markkerry.</description></item><item><title>Running a Kubernetes Cluster on Ubuntu and VirtualBox</title><link>https://markkerry.github.io/posts/2022/03/ubuntu-kubernetes-virtualbox/</link><pubDate>Sun, 06 Mar 2022 09:38:52 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/03/ubuntu-kubernetes-virtualbox/</guid><description>In a previous post, I created the adminbox Ubuntu VM on VirtualBox.
server ip addr comment adminbox 10.0.2.5 Jump box from host with SSH access to all on the Nat network In this post will be using the same setup to build a Kubernetes cluster and deploy an nginx container. I have created a further 3 VMs also connected to the KubeNatNetwork.</description></item><item><title>Quick How-to: Push/Pull to Azure Container Registry</title><link>https://markkerry.github.io/posts/2022/02/acr-push-pull/</link><pubDate>Sun, 20 Feb 2022 11:27:17 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/02/acr-push-pull/</guid><description>In this post I will detail the quick steps to push and pull a Docker container image from an Azure Container Registry.
Using my Go app, I stopped at building the container and continued from here:
Create the Azure Container Registry In the Azure portal, browse to the resource group of your choice or create a new one.
Select Create &amp;gt; Containers &amp;gt; Container Registry
I specified the following:
Subscription Resource group Registry Name: acrmkmdsn Location: UK South Availability zones: Disabled SKU: Standard Leave the rest as default and continue on to Create.</description></item><item><title>Ubuntu Server 20.04 LTS VirtualBox Lab</title><link>https://markkerry.github.io/posts/2022/02/ubuntu-server-lab/</link><pubDate>Sun, 13 Feb 2022 09:10:46 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/02/ubuntu-server-lab/</guid><description>This is a follow on from my old Centos 8 post, but this time I will be using Ubuntu LTS servers running on a Linux host with VirtualBox. The lab environment is designed to be used for any of the following:
General Linux sysadmin Kubernetes cluster Ansible configuration management Terraform VirtualBox Provider This post will cover of the following:
Installing &amp;amp; configuring VirtualBox Installing &amp;amp; configuring the adminbox server The adminbox server will have a bridged adapter to the host and will be used to SSH onto the other VMs via the VirtualBox NAT network.</description></item><item><title>Introduction to C Programming</title><link>https://markkerry.github.io/posts/2022/01/learning-c/</link><pubDate>Sun, 30 Jan 2022 12:27:31 +0000</pubDate><guid>https://markkerry.github.io/posts/2022/01/learning-c/</guid><description>Introduction I&amp;rsquo;ve been coding in PowerShell for many years and wanted to step back and learn the basics of a language which many future languages were based; C++, C#, PowerShell, Go, etc. The biggest hurdle I found when learning C, was the change from an object-orientated language, such as PowerShell, to a functional language in C.
Wikipedia&amp;rsquo;s description of C:
&amp;ldquo;C is a general-purpose, procedural computer programming language supporting structured programming, lexical variable scope, and recursion, with a static type system.</description></item><item><title>AZ-104: Azure Certified Administrator: Renewal</title><link>https://markkerry.github.io/posts/2021/12/az104-administrator-renewal/</link><pubDate>Sat, 11 Dec 2021 15:18:59 +0000</pubDate><guid>https://markkerry.github.io/posts/2021/12/az104-administrator-renewal/</guid><description>I recently renewed my Azure Administrator Associate certification via the MS Learn online assessment.
Visit here to find out more about the Microsoft Certification renewal process.
Learning Resources Although I originally passed the AZ-103, here are the equivalent 104 resources I used the first time round to help me prepare for the exam.
A Cloud Guru - AZ-104 Certification Prep MS Learn - AZ-104 Learning Path MS Learn - AZ-104 Labs Microsoft Press - AZ-104 Exam Ref The Renewal Experience The following points may be handy to know when preparing for the assessment.</description></item><item><title>Automated Autopilot Tenant Move Part 2: Using PowerShell and Graph</title><link>https://markkerry.github.io/posts/2021/10/automated-autopilot-tenant-move-part2/</link><pubDate>Sun, 31 Oct 2021 09:19:49 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/10/automated-autopilot-tenant-move-part2/</guid><description>Following on from my previous post, this one provides a far simpler process to automatically de-register your Windows Autopilot devices from one tenant, and provision them in another tenant. It&amp;rsquo;s not exactly a &amp;ldquo;part 2&amp;rdquo;, rather a different, simpler approach.
I came across a great post on MsEndpointMgr which details the steps to extract your Autopilot profile in the new tenant, and copy to the machines in the old tenant ready for them to be wiped.</description></item><item><title>Automated Autopilot Tenant Move Part 1: Using Graph, Azure Functions and Azure Storage</title><link>https://markkerry.github.io/posts/2021/09/automated-autopilot-tenant-move-part1/</link><pubDate>Sun, 26 Sep 2021 10:31:24 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/09/automated-autopilot-tenant-move-part1/</guid><description>Thanks to Powers-Hell (Ben) for the handy Get-AuthHeader and Invoke-GraphCall PowerShell functions.
Introduction There may be a scenario where you need all of your Intune managed, Autopilot registered devices setup on a new tenant. But there are a few challenges you will face:
An OEM may have uploaded every device&amp;rsquo;s hardware hash to Autopilot, so you do not have them to upload to the new tenant. An Autopilot device cannot be deleted from the registration service while it&amp;rsquo;s a &amp;ldquo;managed device&amp;rdquo; (enrolled in Intune).</description></item><item><title>Quick How-to: Using the Azure Functions Console Sandbox</title><link>https://markkerry.github.io/posts/2021/08/azure-functions-console-sandbox/</link><pubDate>Sun, 29 Aug 2021 13:31:00 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/08/azure-functions-console-sandbox/</guid><description>Introduction In this short post I will walk through the process to create new files for your Azure Function project, using the Console tool. This may come in handy for people who develop their Azure functions from the Azure portal.
As stated when opening the Console development tool:
&amp;ldquo;Manage your web app environment by running common commands (&amp;lsquo;mkdir&amp;rsquo;, &amp;lsquo;cd&amp;rsquo; to change directories, etc.) This is a sandbox environment, so any commands that require elevated privileges will not work.</description></item><item><title>Create and Deploy an Azure Container Instance with Azure Bicep</title><link>https://markkerry.github.io/posts/2021/08/create-an-azure-container-image/</link><pubDate>Sun, 22 Aug 2021 11:23:45 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/08/create-an-azure-container-image/</guid><description>Using the Go container created in a previous post, in the post I will detail the steps to author and deploy an Azure Container Instance using Azure Bicep. Hosted in a Linux container, the image will be pulled from Docker Hub.
What are Azure Container Instances Azure Container Instances provides basic container functionality for simple solutions with no orchestration. They can be deployed with public accessibility (public IP and FQDN), or deployed to a VNet for private network access.</description></item><item><title>Azure ARM Templates - Part 4: Azure Portal Custom Deployment</title><link>https://markkerry.github.io/posts/2021/08/azure-arm-templates-part-4-custom-deployment/</link><pubDate>Sun, 01 Aug 2021 12:03:23 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/08/azure-arm-templates-part-4-custom-deployment/</guid><description>In my previous posts I walked through the process to author ARM templates using VS Code and the Azure Resource Manager (ARM) Tools extension. In this post I will walk through the process to author ARM templates from scratch using the Azure portal&amp;rsquo;s Custom Deployment feature. It&amp;rsquo;s handy for getting started with ARM template authoring, but as you will see below, creates resources with old API versions, bloats the variables element, and creates the variables element at the bottom of the template.</description></item><item><title>Azure ARM Templates - Part 3: Deployment</title><link>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-3-deployment/</link><pubDate>Sun, 04 Jul 2021 12:55:22 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-3-deployment/</guid><description>In the third and final post of this series I&amp;rsquo;ll quickly cover the process to deploy the ARM template with PowerShell
Deploy Open PowerShell and change directory to the location of your ARM template and parameter files. Then complete the following commands to connect to Azure and create a Resource Group to deploy the resources to:
# Import the Azure Az PowerShell Module Import-Module -Name Az # Connect to Azure and authenticate Connect-AzAccount # Create the Resource Group New-AzResourceGroup -Name &amp;#34;rg-eu-vm&amp;#34; -Location &amp;#34;westeurope&amp;#34; Once the Resource Group has been created it&amp;rsquo;s time to deploy the resources using the New-AzResourceGroupDeployment cmdlet.</description></item><item><title>Azure ARM Templates - Part 2: Testing</title><link>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-2-testing/</link><pubDate>Sat, 03 Jul 2021 15:50:08 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/07/azure-arm-templates-part-2-testing/</guid><description>Following on from authoring the Azure ARM Templates - Part 1: Development post, in this one I will cover testing the ARM template.
Two potential ways to test the ARM templates is by manually building a Pester test, and another is by using Microsoft&amp;rsquo;s Azure Resource Manager Template Toolkit (arm-ttk) module.
You can run local tests against ARM templates using PowerShell - which I will demonstrate in the post - but most commonly template testing and validating is used during a CI pipeline.</description></item><item><title>Azure ARM Templates - Part 1: Development</title><link>https://markkerry.github.io/posts/2021/06/azure-arm-templates-part-1-development/</link><pubDate>Sun, 27 Jun 2021 13:05:17 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/06/azure-arm-templates-part-1-development/</guid><description>In the first of this three part series of posts, I will breakdown the components of an Azure ARM template, and the tools used to develop one. Then in part two I will cover testing an ARM template. And finally in part three, I will cover deploying the resources in the ARM template to Azure.
The ARM template will consist of the following resources:
Windows VM Network Interface Public IP Virtual Network Network Security Group Storage Account Getting Started Before looking at Bicep, Terraform or Pulumi, I think it&amp;rsquo;s important to get to know the process of developing Azure ARM templates from scratch.</description></item><item><title>MSIPatches PowerShell Module</title><link>https://markkerry.github.io/posts/2021/05/msipatches-powershell-module/</link><pubDate>Fri, 28 May 2021 12:51:14 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/05/msipatches-powershell-module/</guid><description>I created a PowerShell module a few years back to safely purge the C:\Windows\Installer directory of any orphaned MSI patches. This directory can often grow very large in size due to applications such as Microsoft Office (MSI not Click-to-Run) being regularly patched. Superseded patches get left behind leaving them in an orphaned state. The MSIPatches module can detect and move the orphaned patches freeing up valuable disk space.
This module requires the MSI module by Heath Stewart, which will be automatically installed when MSIPatches module is installed.</description></item><item><title>Installing &amp; Configuring CentOS 8 Minimal Install</title><link>https://markkerry.github.io/posts/2021/05/centos8-setup/</link><pubDate>Sun, 09 May 2021 12:19:49 +0000</pubDate><guid>https://markkerry.github.io/posts/2021/05/centos8-setup/</guid><description>I wanted to start learning the basics of Kubernetes and thought the best way to get started was by creating a virtualised lab and starting from scratch. But I will not cover k8s in this post. Instead I will detail the initial setup of the CentOS 8 minimal install VM for a lab environment which can be used for k8s or Ansible.
I used Hyper-V on Windows 10, connected to a &amp;ldquo;Default switch&amp;rdquo; (internal), and running 3x CentOS 8 VMs.</description></item><item><title>Serverless LAPS Azure Function and Proactive Remediation</title><link>https://markkerry.github.io/posts/2021/04/serverless-laps-azure-function/</link><pubDate>Sun, 25 Apr 2021 11:04:45 +0100</pubDate><guid>https://markkerry.github.io/posts/2021/04/serverless-laps-azure-function/</guid><description>Based on the great solution created by John Seerden with a little help creating and deploying Azure Functions by the Serverless on Azure YouTube channel.
All of the code in this post can be found in my GitHub repo
I am only posting a few differences here, such as creating the Azure resources using AZ CLI and creating/testing/deploying the function using the Azure Functions Core Tools CLI.
What is Serverless LAPS Local Admin Password Solution (LAPS) is a great solution from Microsoft to allow IT admins to automatically recycle local admin accounts on domain joined Windows machines.</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 1: Intro</title><link>https://markkerry.github.io/posts/2021/04/hugo-and-github-pages-part1/</link><pubDate>Sun, 04 Apr 2021 12:13:43 +0000</pubDate><guid>https://markkerry.github.io/posts/2021/04/hugo-and-github-pages-part1/</guid><description>The following series of posts will walk through the process I used to create and build this HUGO site, hosted in GitHub Pages. Everything required in the following posts is free. HUGO/templates, GitHub Pages, GitHub Actions is all free to use.
What is HUGO? HUGO is an open source static site generator written in GO. I chose HUGO because it looked simple to get started, all posts are written in markdown, and was compatible with GitHub pages.</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 2: Create the Site</title><link>https://markkerry.github.io/posts/2021/04/hugo-and-github-pages-part2/</link><pubDate>Sun, 04 Apr 2021 12:11:43 +0000</pubDate><guid>https://markkerry.github.io/posts/2021/04/hugo-and-github-pages-part2/</guid><description>Assuming at this stage you have installed all the prerequisite apps required in Part 1 to get started with HUGO: Git, GitHub Desktop, and HUGO.
The Official HUGO getting started docs are a great resource to read through and recommend you get started there if you are having any trouble following the below.
Create the Site Browse to your local directory where you want to keep the site&amp;rsquo;s source files, and enter the following commands to create the site (change markkerry to your GitHub username).</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 3: Build and Deploy</title><link>https://markkerry.github.io/posts/2021/04/hugo-and-github-pages-part3/</link><pubDate>Sun, 04 Apr 2021 12:09:43 +0000</pubDate><guid>https://markkerry.github.io/posts/2021/04/hugo-and-github-pages-part3/</guid><description>Now that we&amp;rsquo;ve created our site and first post, we can start creating the repos to build, deploy and host the static site.
Create the Two GitHub Repositories Browse to GitHub and create two new repos. More info on how to do this can be found here
The two repos will be named as follows:
username-hugo (mine is markkerry-hugo) username.github.io (mine is markkerry.github.io) The username-hugo repo is where we are going to commit our site to.</description></item><item><title>Git Basics</title><link>https://markkerry.github.io/posts/2021/03/git-basics/</link><pubDate>Sun, 21 Mar 2021 15:23:16 +0000</pubDate><guid>https://markkerry.github.io/posts/2021/03/git-basics/</guid><description>Here are some basics. I&amp;rsquo;m going to push the code from my last post to GitHub. In this example I am using PowerShell with Git and GitHub Desktop already installed. You will have to ensure you sign into GitHub Desktop with your GitHub account.
Tip: You can install and import the PowerShell module posh-git for the Git summary status info to display in your terminal.
Directory Structure In the following example, I created my new repository I want to push to GutHub in C:\git\repos\ and created a new folder called basic-go-container.</description></item><item><title>Running a Local Go Web App in Docker</title><link>https://markkerry.github.io/posts/2021/03/docker-go-web-app/</link><pubDate>Sun, 14 Mar 2021 14:35:09 +0000</pubDate><guid>https://markkerry.github.io/posts/2021/03/docker-go-web-app/</guid><description>In this post, I walk through creating a simple Go web app that runs in a Docker container, and lists the hostname of the container it&amp;rsquo;s running in. I chose Go as I&amp;rsquo;ve recently gotten started writing code in Go and it&amp;rsquo;s a lot of fun to work with.
The container will install Go, so there is no need to install it locally on your machine. Docker is a prerequisite, however.</description></item><item><title>Markdown Reference</title><link>https://markkerry.github.io/posts/2021/02/markdown/</link><pubDate>Mon, 22 Feb 2021 17:47:44 +0000</pubDate><guid>https://markkerry.github.io/posts/2021/02/markdown/</guid><description>If you scroll to the bottom of any page of this site, you will notice the words &amp;ldquo;Powered by Hugo&amp;rdquo;, and all posts generated in a Hugo static web app are written in markdown. Having owned a Github account for a few years now, I have some experience writing docs in markdown, but at times have to resort to looking up Markdown style guides.
Here is my quick reference for writing in Markdown.</description></item><item><title>About</title><link>https://markkerry.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://markkerry.github.io/about/</guid><description>about</description></item></channel></rss>