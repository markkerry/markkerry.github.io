<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on markkerry.github.io</title><link>https://markkerry.github.io/posts/</link><description>Recent content in Posts on markkerry.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 22 Aug 2021 11:23:45 +0100</lastBuildDate><atom:link href="https://markkerry.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Create and Deploy an Azure Container Instance with Azure Bicep</title><link>https://markkerry.github.io/posts/create-an-azure-container-image/</link><pubDate>Sun, 22 Aug 2021 11:23:45 +0100</pubDate><guid>https://markkerry.github.io/posts/create-an-azure-container-image/</guid><description>Using the Go container created in a previous post, in the post I will detail the steps to author and deploy an Azure Container Instance using Azure Bicep. Hosted in a Linux container, the image will be pulled from Docker Hub.
What are Azure Container Instances Azure Container Instances provides basic container functionality for simple solutions with no orchestration. They can be deployed with public accessibility (public IP and FQDN), or deployed to a VNet for private network access.</description></item><item><title>Azure Portal's ARM Template Editor - Custom Deployment</title><link>https://markkerry.github.io/posts/azure-arm-template-custom-deployment/</link><pubDate>Sun, 01 Aug 2021 12:03:23 +0100</pubDate><guid>https://markkerry.github.io/posts/azure-arm-template-custom-deployment/</guid><description>In my previous posts I walked through the process to author ARM templates using VS Code and the Azure Resource Manager (ARM) Tools extension. In this post I will walk through the process to author ARM templates from scratch using the Azure portal&amp;rsquo;s Custom Deployment feature. It&amp;rsquo;s handy for getting started with ARM template authoring, but as you will see below, creates resources with old API versions, bloats the variables element, and creates the variables element at the bottom of the template.</description></item><item><title>Azure ARM Templates - Part 3: Deployment</title><link>https://markkerry.github.io/posts/azure-arm-templates-part-3-deployment/</link><pubDate>Sun, 04 Jul 2021 12:55:22 +0100</pubDate><guid>https://markkerry.github.io/posts/azure-arm-templates-part-3-deployment/</guid><description>In the third and final post of this series I&amp;rsquo;ll quickly cover the process to deploy the ARM template with PowerShell
Deploy Open PowerShell and change directory to the location of your ARM template and parameter files. Then complete the following commands to connect to Azure and create a Resource Group to deploy the resources to:
# Import the Azure Az PowerShell Module Import-Module -Name Az # Connect to Azure and authenticate Connect-AzAccount # Create the Resource Group New-AzResourceGroup -Name &amp;#34;rg-eu-vm&amp;#34; -Location &amp;#34;westeurope&amp;#34; Once the Resource Group has been created it&amp;rsquo;s time to deploy the resources using the New-AzResourceGroupDeployment cmdlet.</description></item><item><title>Azure ARM Templates - Part 2: Testing</title><link>https://markkerry.github.io/posts/azure-arm-templates-part-2-testing/</link><pubDate>Sat, 03 Jul 2021 15:50:08 +0100</pubDate><guid>https://markkerry.github.io/posts/azure-arm-templates-part-2-testing/</guid><description>Following on from authoring the Azure ARM Templates - Part 1: Development post, in this one I will cover testing the ARM template.
Two potential ways to test the ARM templates is by manually building a Pester test, and another is by using Microsoft&amp;rsquo;s Azure Resource Manager Template Toolkit (arm-ttk) module.
You can run local tests against ARM templates using PowerShell - which I will demonstrate in the post - but most commonly template testing and validating is used during a CI pipeline.</description></item><item><title>Azure ARM Templates - Part 1: Development</title><link>https://markkerry.github.io/posts/azure-arm-templates-part-1-development/</link><pubDate>Sun, 27 Jun 2021 13:05:17 +0100</pubDate><guid>https://markkerry.github.io/posts/azure-arm-templates-part-1-development/</guid><description>In the first of this three part series of posts, I will breakdown the components of an Azure ARM template, and the tools used to develop one. Then in part two I will cover testing an ARM template. And finally in part three, I will cover deploying the resources in the ARM template to Azure.
The ARM template will consist of the following resources:
Windows VM Network Interface Public IP Virtual Network Network Security Group Storage Account Getting Started Before looking at Bicep, Terraform or Pulumi, I think it&amp;rsquo;s important to get to know the process of developing Azure ARM templates from scratch.</description></item><item><title>MSIPatches PowerShell Module</title><link>https://markkerry.github.io/posts/msipatches-powershell-module/</link><pubDate>Fri, 28 May 2021 12:51:14 +0100</pubDate><guid>https://markkerry.github.io/posts/msipatches-powershell-module/</guid><description>I created a PowerShell module a few years back to safely purge the C:\Windows\Installer directory of any orphaned MSI patches. This directory can often grow very large in size due to applications such as Microsoft Office (MSI not Click-to-Run) being regularly patched. Superseded patches get left behind leaving them in an orphaned state. The MSIPatches module can detect and move the orphaned patches freeing up valuable disk space.
This module requires the MSI module by Heath Stewart, which will be automatically installed when MSIPatches module is installed.</description></item><item><title>Installing &amp; Configuring CentOS 8 Minimal Install</title><link>https://markkerry.github.io/posts/centos8-setup/</link><pubDate>Sun, 09 May 2021 12:19:49 +0000</pubDate><guid>https://markkerry.github.io/posts/centos8-setup/</guid><description>I wanted to start learning the basics of Kubernetes and thought the best way to get started was by creating a virtualised lab and starting from scratch. But I will not cover k8s in this post. Instead I will detail the initial setup of the CentOS 8 minimal install VM for a lab environment which can be used for k8s or Ansible.
I used Hyper-V on Windows 10, connected to a &amp;ldquo;Default switch&amp;rdquo; (internal), and running 3x CentOS 8 VMs.</description></item><item><title>Serverless LAPS Azure Function and Proactive Remediation</title><link>https://markkerry.github.io/posts/serverless-laps-azure-function/</link><pubDate>Sun, 25 Apr 2021 11:04:45 +0100</pubDate><guid>https://markkerry.github.io/posts/serverless-laps-azure-function/</guid><description>Based on the great solution created by John Seerden with a little help creating and deploying Azure Functions by the Serverless on Azure YouTube channel.
All of the code in this post can be found in my GitHub repo
I am only posting a few differences here, such as creating the Azure resources using AZ CLI and creating/testing/deploying the function using the Azure Functions Core Tools CLI.
What is Serverless LAPS Local Admin Password Solution (LAPS) is a great solution from Microsoft to allow IT admins to automatically recycle local admin accounts on domain joined Windows machines.</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 1: Intro</title><link>https://markkerry.github.io/posts/hugo-and-github-pages-part1/</link><pubDate>Sun, 04 Apr 2021 12:13:43 +0000</pubDate><guid>https://markkerry.github.io/posts/hugo-and-github-pages-part1/</guid><description>The following series of posts will walk through the process I used to create and build this HUGO site, hosted in GitHub Pages. Everything required in the following posts is free. HUGO/templates, GitHub Pages, GitHub Actions is all free to use.
What is HUGO? HUGO is an open source static site generator written in GO. I chose HUGO because it looked simple to get started, all posts are written in markdown, and was compatible with GitHub pages.</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 2: Create the Site</title><link>https://markkerry.github.io/posts/hugo-and-github-pages-part2/</link><pubDate>Sun, 04 Apr 2021 12:11:43 +0000</pubDate><guid>https://markkerry.github.io/posts/hugo-and-github-pages-part2/</guid><description>Assuming at this stage you have installed all the prerequisite apps required in Part 1 to get started with HUGO: Git, GitHub Desktop, and HUGO.
The Official HUGO getting started docs are a great resource to read through and recommend you get started there if you are having any trouble following the below.
Create the Site Browse to your local directory where you want to keep the site&amp;rsquo;s source files, and enter the following commands to create the site (change markkerry to your GitHub username).</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 3: Build and Deploy</title><link>https://markkerry.github.io/posts/hugo-and-github-pages-part3/</link><pubDate>Sun, 04 Apr 2021 12:09:43 +0000</pubDate><guid>https://markkerry.github.io/posts/hugo-and-github-pages-part3/</guid><description>Now that we&amp;rsquo;ve created our site and first post, we can start creating the repos to build, deploy and host the static site.
Create the Two GitHub Repositories Browse to GitHub and create two new repos. More info on how to do this can be found here
The two repos will be named as follows:
username-hugo (mine is markkerry-hugo) username.github.io (mine is markkerry.github.io) The username-hugo repo is where we are going to commit our site to.</description></item><item><title>Git Basics</title><link>https://markkerry.github.io/posts/git-basics/</link><pubDate>Sun, 21 Mar 2021 15:23:16 +0000</pubDate><guid>https://markkerry.github.io/posts/git-basics/</guid><description>Here are some basics. I&amp;rsquo;m going to push the code from my last post to GitHub. In this example I am using PowerShell with Git and GitHub Desktop already installed. You will have to ensure you sign into GitHub Desktop with your GitHub account.
Tip: You can install and import the PowerShell module posh-git for the Git summary status info to display in your terminal.
Directory Structure In the following example, I created my new repository I want to push to GutHub in C:\git\repos\ and created a new folder called basic-go-container.</description></item><item><title>Running a Local Go Web App in Docker</title><link>https://markkerry.github.io/posts/docker-go-web-app/</link><pubDate>Sun, 14 Mar 2021 14:35:09 +0000</pubDate><guid>https://markkerry.github.io/posts/docker-go-web-app/</guid><description>In this post, I walk through creating a simple Go web app that runs in a Docker container, and lists the hostname of the container it&amp;rsquo;s running in. I chose Go as I&amp;rsquo;ve recently gotten started writing code in Go and it&amp;rsquo;s a lot of fun to work with.
The container will install Go, so there is no need to install it locally on your machine. Docker is a prerequisite, however.</description></item><item><title>Markdown Reference</title><link>https://markkerry.github.io/posts/markdown/</link><pubDate>Mon, 22 Feb 2021 17:47:44 +0000</pubDate><guid>https://markkerry.github.io/posts/markdown/</guid><description>If you scroll to the bottom of any page of this site, you will notice the words &amp;ldquo;Powered by Hugo&amp;rdquo;, and all posts generated in a Hugo static web app are written in markdown. Having owned a Github account for a few years now, I have some experience writing docs in markdown, but at times have to resort to looking up Markdown style guides.
Here is my quick reference for writing in Markdown.</description></item></channel></rss>