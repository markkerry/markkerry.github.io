<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on markkerry.github.io</title><link>https://markkerry.github.io/posts/</link><description>Recent content in Posts on markkerry.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Apr 2021 11:04:45 +0100</lastBuildDate><atom:link href="https://markkerry.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Serverless LAPS Azure Function and Proactive Remediation</title><link>https://markkerry.github.io/posts/serverless-laps-azure-function/</link><pubDate>Sun, 25 Apr 2021 11:04:45 +0100</pubDate><guid>https://markkerry.github.io/posts/serverless-laps-azure-function/</guid><description>Based on the great solution created by John Seerden with a little help creating and deploying Azure Functions by the Serverless on Azure YouTube channel.
All of the code in this post can be found in my GitHub repo
I am only posting a few differences here, such as creating the Azure resources using AZ CLI and creating/testing/deploying the function using the Azure Functions Core Tools CLI.
What is Serverless LAPS Local Admin Password Solution (LAPS) is a great solution from Microsoft to allow IT admins to automatically recycle local admin accounts on domain joined Windows machines.</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 1: Intro</title><link>https://markkerry.github.io/posts/hugo-and-github-pages-part1/</link><pubDate>Sun, 04 Apr 2021 12:13:43 +0000</pubDate><guid>https://markkerry.github.io/posts/hugo-and-github-pages-part1/</guid><description>The following series of posts will walk through the process I used to create and build this HUGO site, hosted in GitHub Pages. Everything required in the following posts is free. HUGO/templates, GitHub Pages, GitHub Actions is all free to use.
What is HUGO? HUGO is an open source static site generator written in GO. I chose HUGO because it looked simple to get started, all posts are written in markdown, and was compatible with GitHub pages.</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 2: Create the Site</title><link>https://markkerry.github.io/posts/hugo-and-github-pages-part2/</link><pubDate>Sun, 04 Apr 2021 12:11:43 +0000</pubDate><guid>https://markkerry.github.io/posts/hugo-and-github-pages-part2/</guid><description>Assuming at this stage you have installed all the prerequisite apps required in Part 1 to get started with HUGO: Git, GitHub Desktop, and HUGO.
The Official HUGO getting started docs are a great resource to read through and recommend you get started there if you are having any trouble following the below.
Create the Site Browse to your local directory where you want to keep the site&amp;rsquo;s source files, and enter the following commands to create the site (change markkerry to your GitHub username).</description></item><item><title>HUGO Static Site Hosted on GitHub Pages - Part 3: Build and Deploy</title><link>https://markkerry.github.io/posts/hugo-and-github-pages-part3/</link><pubDate>Sun, 04 Apr 2021 12:09:43 +0000</pubDate><guid>https://markkerry.github.io/posts/hugo-and-github-pages-part3/</guid><description>Now that we&amp;rsquo;ve created our site and first post, we can start creating the repos to build, deploy and host the static site.
Create the Two GitHub Repositories Browse to GitHub and create two new repos. More info on how to do this can be found here
The two repos will be named as follows:
username-hugo (mine is markkerry-hugo) username.github.io (mine is markkerry.github.io) The username-hugo repo is where we are going to commit our site to.</description></item><item><title>Git Basics</title><link>https://markkerry.github.io/posts/git-basics/</link><pubDate>Sun, 21 Mar 2021 15:23:16 +0000</pubDate><guid>https://markkerry.github.io/posts/git-basics/</guid><description>Here are some basics. I&amp;rsquo;m going to push the code from my last post to GitHub. In this example I am using PowerShell with Git and GitHub Desktop already installed. You will have to ensure you sign into GitHub Desktop with your GitHub account.
Tip: You can install and import the PowerShell module posh-git for the Git summary status info to display in your terminal.
Directory Structure In the following example, I created my new repository I want to push to GutHub in C:\git\repos\ and created a new folder called basic-go-container.</description></item><item><title>Running a Local Go Web App in Docker</title><link>https://markkerry.github.io/posts/docker-go-web-app/</link><pubDate>Sun, 14 Mar 2021 14:35:09 +0000</pubDate><guid>https://markkerry.github.io/posts/docker-go-web-app/</guid><description>In this post, I walk through creating a simple Go web app that runs in a Docker container, and lists the hostname of the container it&amp;rsquo;s running in. I chose Go as I&amp;rsquo;ve recently gotten started writing code in Go and it&amp;rsquo;s a lot of fun to work with.
The container will install Go, so there is no need to install it locally on your machine. Docker is a prerequisite, however.</description></item><item><title>Markdown Reference</title><link>https://markkerry.github.io/posts/markdown/</link><pubDate>Mon, 22 Feb 2021 17:47:44 +0000</pubDate><guid>https://markkerry.github.io/posts/markdown/</guid><description>If you scroll to the bottom of any page of this site, you will notice the words &amp;ldquo;Powered by Hugo&amp;rdquo;, and all posts generated in a Hugo static web app are written in markdown. Having owned a Github account for a few years now, I have some experience writing docs in markdown, but at times have to resort to looking up Markdown style guides.
Here is my quick reference for writing in Markdown.</description></item></channel></rss>